#<?cfg paf policy ?>

needCalibRegistry: true

levels: {
    # Keys that are NOT relevant for a particular level
    skyTile: "visit" "ccdnum"
    visit: "ccdnum"
    ccd: "none"
}
defaultLevel: "ccd"
defaultSubLevels: {
    skyTile: "ccd"
    visit: "ccd"
}

camera: "../decam/camGeom"

exposures: {
    raw: {
        template:    "%(date)s/%(filter)s/decam%(visit)07d.fits.fz[%(hdu)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccdnum"
    }
    postISRCCD: {
        template:    "%(visit)07d/postISR/postISR-%(visit)07d_%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
    }
    instcal: {
        template:    "%(visit)07d/instcal%(visit)07d.fits.fz[%(ccdnum)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccdnum"
    }
    dqmask: {
        template:    "%(visit)07d/dqmask%(visit)07d.fits.fz[%(ccdnum)d]"
        python:      "lsst.afw.image.ImageU"
        persistable: "ImageU"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccdnum"
    }
    wtmap: {
        template:    "%(visit)07d/wtmap%(visit)07d.fits.fz[%(ccdnum)d]"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccdnum"
    }
    icExp: {
        template:    "%(visit)07d/icExp/icExp-%(visit)07d_%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccdnum"
    }
    calexp: {
        template:    "%(visit)07d/calexp/calexp-%(visit)07d_%(ccdnum)02d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "raw"
        columns:     "visit"
        columns:     "ccdnum"
    }
    deepCoadd_tempExp: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)stempExp/v%(visit)d-f%(filter)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
    }
    deepCoadd: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
    }
    deepCoadd_calexp: {
        template:    "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
        tables:      raw_skyTile
    }
    deepCoadd_calexp_det: {
        template:    "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp_det-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
        tables:      raw_skyTile
    }
    goodSeeingCoadd_tempExp: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)stempExp/v%(visit)d-f%(filter)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
    }
    goodSeeingCoadd: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
    }
    goodSeeingCoadd_calexp: {
        template:    "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:      raw
        tables:      raw_skyTile
    }
}

calibrations: {
    bias: {
        # Given that MasterCal hdu number is identical to ccdnum
        template:    "%(path)s[%(ccdnum)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "bias"
        columns:     "date"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      false
        validRange:  true
        obsTimeName: date
    }
    flat: {
        template:    "%(path)s[%(ccdnum)d]"
        python:      "lsst.afw.image.DecoratedImageF"
        persistable: "DecoratedImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "flat"
        columns:     "filter" "date"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      true
        validRange:  true
        obsTimeName: date
    }
    fringe: {
        template:    "%(path)s"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "fringe"
        columns:     "filter" "ccdnum"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      true
        validRange:  false
    }
    defects: {
        template:    "%(path)s"
        python:      "lsst.afw.image.ImageU"
        persistable: "ImageU"
        storage:     "FitsStorage"
        level:       "ccd"
        tables:      "defect"
        columns:     "date" "ccdnum"
        reference:   "raw_visit"
        refCols:     "visit"
        filter:      false
        validRange:  true
        obsTimeName: date
    }
}

datasets: {

    ccdExposureId: {
        template:     "ignored"
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId: {
        template:     "ignored"
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId_bits: {
        template:     "ignored"
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepMergedCoaddId: {
        template:     "ignored"
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepMergedCoaddId_bits: {
        template:     "ignored"
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    psf: {
        template:      "%(visit)07d/psf/psf-%(visit)07d_%(ccdnum)02d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw"
    }
    apCorr: {
        template:      "%(visit)07d/apCorr/apCorr-%(visit)07d_%(ccdnum)02d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:   "ApertureCorrection"
        storage:       "PickleStorage"
        tables:        "raw"
    }
    icSrc: {
        template:      "%(visit)07d/icSrc/icSrc-%(visit)07d_%(ccdnum)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    src: {
        template:      "%(visit)07d/src/src-%(visit)07d_%(ccdnum)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
    }
    icMatch: {
        template:      "%(visit)07d/icMatch/icMatch-%(visit)07d_%(ccdnum)02d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    srcMatch: {
        template:      "%(visit)07d/srcMatch/srcMatch-%(visit)07d_%(ccdnum)02d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icExpBackground: {
        template:      "%(visit)07d/icExp/icExpBackground-%(visit)07d_%(ccdnum)02d.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
    }
    calexpBackground: {
        template:      "%(visit)07d/bkgd/bkgd-%(visit)07d_%(ccdnum)02d.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_config: {
        template:      "config/processCcd.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    processCcd_metadata: {
        template:      "%(visit)07d/metadata/metadata-%(visit)07d_%(ccdnum)02d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    processCcdDecam_config: {
        template:      "config/processCcdDecam.py"
        python:        "lsst.obs.decam.processCcdDecam.ProcessCcdDecamConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    processCcdDecam_metadata: {
        template:      "%(visit)07d/metadata/metadata-%(visit)07d_%(ccdnum)02d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }

    src_schema: {
        template:      "schema/src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icSrc_schema: {
        template:      "schema/icSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_skyMap: {
        template:      "deepCoadd/skyMap.pickle"
        python:        "lsst.skymap.BaseSkyMap"
        persistable:   "ignored"
        storage:       "PickleStorage"
        tables:        raw
    }
    deep_makeSkyMap_config: {
        template:      "config/deep_makeSkyMap.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    deep_makeSkyMap_metadata: {
        template:      "metadata/deep_makeSkyMap.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    deep_makeCoaddTempExp_config: {
        template:      "config/deep_makeCoaddTempExp.py"
        python:        "lsst.pipe.tasks.makeCoaddTempExp.MakeCoaddTempExpConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_makeCoaddTempExp_metadata: {
        template:      "deepCoadd/%(filter)s/%(tract)d/%(patch)s/makeCoaddTempExpMD.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_safeClipAssembleCoadd_config: {
        template:      "config/deep_assembleCoadd.py"
        python:        "lsst.pipe.tasks.assembleCoadd.SafeClipAssembleCoaddConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_safeClipAssembleCoadd_metadata: {
        template:      "deepCoadd/%(filter)s/%(tract)d/%(patch)s/assembleCoaddMD.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_processCoadd_config: {
        template:      "config/deep_processCoadd.py"
        python:        "lsst.pipe.tasks.processCoadd.ProcessCoaddConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_processCoadd_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/processCoaddMD.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_calexp_detBackground: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/detBkgd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_det: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/det-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_det_schema: {
        template:      "schema/deepCoadd_det.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }
    deepCoadd_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/src-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_src_schema: {
        template:      "schema/deepCoadd_src.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_visit
    }
    detectCoaddSources_config: {
        template:      "config/detectCoadd.py"
        python:        "lsst.pipe.tasks.multiBand.DetectCoaddSourcesConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    detectCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/detectCoaddMD.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    mergeCoaddDetections_config: {
        template:      "config/mergeDetect.py"
        python:        "lsst.pipe.tasks.multiBand.MergeDetectionsConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    deepCoadd_mergeDet: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeDet-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_mergeDet_schema: {
        template:      "schema/deepCoadd_mergeDet.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }
    deepCoadd_peak_schema: {
        template:      "schema/deepCoadd_peak.fits"
        python:        "lsst.afw.detection.PeakCatalog"
        persistable:   "PeakCatalog"
        storage:       "FitsCatalogStorage"
    }
    measureCoaddSources_config: {
        template:      "config/measureMergedCoadd.py"
        python:        "lsst.pipe.tasks.multiBand.MeasureMergedCoaddSourcesConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    measureCoaddSources_metadata: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/measMD.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_meas: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/meas-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_meas_schema: {
        template:      "schema/deepCoadd_meas.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }
    mergeCoaddMeasurements_config: {
        template:      "config/mergeMeasure.py"
        python:        "lsst.pipe.tasks.multiBand.MergeMeasurementsConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
    mergeCoaddMeasurements_metadata: {
        template:      "deepCoadd-results/merged/%(tract)d/%(patch)s/mergeMeasMD.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_ref_schema: {
        template:      "schema/deepCoadd_ref.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
    }
    deepDiff_config: {
        template:      "config/deepDiff.py"
        python:        "lsst.pipe.tasks.imageDifference.ImageDifferenceConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepDiff_metadata: {
        template:      "deepDiff/v%(visit)d/metadata-%(ccdnum)02d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepDiff_differenceExp: {
        template:      "deepDiff/v%(visit)d/diffexp-%(ccdnum)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepDiff_matchedExp: {
        template:      "deepDiff/v%(visit)d/matchexp-%(ccdnum)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepDiff_diaSrc: {
        template:      "deepDiff/v%(visit)d/diaSrc-%(ccdnum)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepDiff_diaSrc_schema: {
        template:      "schema/deepDiff_diaSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepDiff_kernelSrc: {
        template:      "deepDiff/v%(visit)d/kernelSrc-%(ccdnum)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingCoadd_skyMap: {
        template:      "goodSeeingCoadd/skyMap.pickle"
        python:        "lsst.skymap.BaseSkyMap"
        persistable:   "ignored"
        storage:       "PickleStorage"
        tables:        raw
    }
    goodSeeing_makeSkyMap_config: {
        template:      "config/goodSeeing_makeSkyMap.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    goodSeeing_makeSkyMap_metadata: {
        template:      "metadata/goodSeeing_makeSkyMap.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    goodSeeingDiff_config: {
        template:      "config/goodSeeingDiff.py"
        python:        "lsst.pipe.tasks.imageDifference.ImageDifferenceConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingDiff_metadata: {
        template:      "goodSeeingDiff/v%(visit)d/metadata-%(ccdnum)02d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingDiff_differenceExp: {
        template:      "goodSeeingDiff/v%(visit)d/diffexp-%(ccdnum)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingDiff_matchedExp: {
        template:      "goodSeeingDiff/v%(visit)d/matchexp-%(ccdnum)02d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingDiff_diaSrc: {
        template:      "goodSeeingDiff/v%(visit)d/diaSrc-%(ccdnum)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingDiff_diaSrc_schema: {
        template:      "schema/goodSeeingDiff_diaSrc.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingDiff_kernelSrc: {
        template:      "goodSeeingDiff/v%(visit)d/kernelSrc-%(ccdnum)02d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }

}
